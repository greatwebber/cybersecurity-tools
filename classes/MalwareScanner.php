<?php
require_once 'vendor/autoload.php';

use GuzzleHttp\Client;
class MalwareScanner {

    // Method to scan a file for malware
    private $apiKey;
    private $client;

    public function __construct() {
        // Your VirusTotal API Key
        $this->apiKey = 'cfac2931bdb25c962749aeb53487ea289d444f8504322bcb46b8b49806856cb4';  // Replace this with your actual VirusTotal API key
        $this->client = new Client();  // Guzzle client
    }

    // Method to scan a file using VirusTotal API
    public function scanFile($filePath) {
        // Check if file exists
        if (!file_exists($filePath)) {
            return "File does not exist.";
        }

        // Open the file for uploading
        $file = fopen($filePath, 'r');

        // Make an HTTP POST request to VirusTotal API to scan the file
        $response = $this->client->request('POST', 'https://www.virustotal.com/api/v3/files', [
            'headers' => [
                'x-apikey' => $this->apiKey
            ],
            'multipart' => [
                [
                    'name'     => 'file',
                    'contents' => $file
                ]
            ]
        ]);

        // Parse the JSON response
        $data = json_decode($response->getBody()->getContents(), true);

        // Log the initial response for debugging
        file_put_contents(__DIR__ . '/../logs/virustotal_response_log.txt', print_r($data, true));

        // Check if we got the 'links.self' for the analysis
        if (isset($data['data']['links']['self'])) {
            $analysisUrl = $data['data']['links']['self'];

            // Now make a GET request to retrieve the analysis details
            do {
                $analysisResponse = $this->client->request('GET', $analysisUrl, [
                    'headers' => [
                        'x-apikey' => $this->apiKey
                    ]
                ]);

                // Parse the analysis response
                $analysisData = json_decode($analysisResponse->getBody()->getContents(), true);

                // Log the detailed analysis response
                file_put_contents(__DIR__ . '/../logs/virustotal_analysis_log.txt', print_r($analysisData, true));

                // Check the status of the analysis
                $status = $analysisData['data']['attributes']['status'];
                if ($status === 'queued') {
                    // If still queued, wait for 10 seconds before checking again
                    sleep(10);
                }
            } while ($status === 'queued'); // Repeat until the status is not 'queued'

            // After the status is completed, check the scan results
            if (isset($analysisData['data']['attributes']['last_analysis_stats'])) {
                $scanResults = $analysisData['data']['attributes']['last_analysis_stats'];

                // Log scan results for debugging
                file_put_contents(__DIR__ . '/../logs/virustotal_scan_results_log.txt', print_r($scanResults, true));

                // Check for any infections
                if ($scanResults['malicious'] > 0) {
                    return "File is malicious. Detected by " . $scanResults['malicious'] . " engines.";
                } else {
                    return "File is safe.";
                }
            }

            // Handle error if no scan results found
            return "No scan results found or the analysis did not provide results.";
        }

        // Handle error if no analysis link is found in the initial response
        return "Error scanning file or unable to retrieve analysis link.";
    }




    // Method to check a file hash with VirusTotal (faster than re-uploading)
    public function scanFileByHash($fileHash) {
        // Make an HTTP GET request to VirusTotal API to check a file by its hash
        $response = $this->client->request('GET', "https://www.virustotal.com/api/v3/files/$fileHash", [
            'headers' => [
                'x-apikey' => $this->apiKey
            ]
        ]);

        // Parse the JSON response
        $data = json_decode($response->getBody()->getContents(), true);

        if (isset($data['data']['attributes']['last_analysis_stats'])) {
            $scanResults = $data['data']['attributes']['last_analysis_stats'];

            // Check for any infections
            if ($scanResults['malicious'] > 0) {
                return "File is malicious. Detected by " . $scanResults['malicious'] . " engines.";
            } else {
                return "File is safe.";
            }
        }

        // Handle error if no data or issue with scanning
        return "Error checking file hash or unable to retrieve scan results.";
    }


    // Method to scan multiple files in a directory
    public function scanDirectory($directoryPath) {
        $results = [];

        if (!is_dir($directoryPath)) {
            return "Directory not found.";
        }

        // Scan all files in the directory
        $files = scandir($directoryPath);
        foreach ($files as $file) {
            if ($file == '.' || $file == '..') continue; // Skip system files
            $filePath = $directoryPath . DIRECTORY_SEPARATOR . $file;
            $results[$file] = $this->scanFile($filePath);
        }

        return $results;
    }
}
?>
